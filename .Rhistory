#------------------------------------------------------------------
#Descargar datos de yahoo
#1 Stock
data_eq_1=new.env()
suppressWarnings(try(getSymbols(eq_1, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_1, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_1)) data_eq_1[[i]] = adjustOHLC(data_eq_1[[i]], use.Adjusted=T),silent = TRUE))
#2 Stock
data_eq_2=new.env()
suppressWarnings(try(getSymbols(eq_2, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_2, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_2)) data_eq_2[[i]] = adjustOHLC(data_eq_2[[i]], use.Adjusted=T),silent = TRUE))
#-------------------------------------------------------------------
#Extraer Precio ajustado
precios_1=as.numeric(data_eq_1[[eq_1]][,6])
precios_2=as.numeric(data_eq_2[[eq_2]][,6])
#-------------------------------------------------------------------------------
#Sumar rentabilidades
#-------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#Parametros iniciales
capital_inicial=10000000
#------------------------------------------------------------------------------
#Calculo
cantidad_comprada_1=(1-0.015)*capital_inicial/precios_1[1]
cantidad_comprada_2=0.015*capital_inicial/precios_2[1]
#--------------------------------------------------------------------------------
#Calcular valor cartera
valor_portfolio_p=precios_1*cantidad_comprada_1+
precios_2*cantidad_comprada_2
#Crear rentabilidad inicia igual a 1
valor_portfolio_p=valor_portfolio_p/capital_inicial
#Crear valor_portolio primera ronda vs ronda+1
if(i_g==1){
valor_portfolio=valor_portfolio_p
}else{
valor_portfolio_p=valor_portfolio_p+(valor_portfolio[length(valor_portfolio)]-valor_portfolio[1])
valor_portfolio=c(valor_portfolio,valor_portfolio_p)
}
#--------------------------------------------------------------------------------------
#Etapa 12
#-------------------------------------------------------------------------------------
#Numerar la etapa
i_g=12
#año-mes-dia
f_init_test='2024-10-30'
f_final_test='2024-12-02'
#----------------------------------------------------------------------
#Cargar simbolo
eq_1="IJS"
eq_2="UPRO"
#------------------------------------------------------------------
#Descargar datos de yahoo
#1 Stock
data_eq_1=new.env()
suppressWarnings(try(getSymbols(eq_1, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_1, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_1)) data_eq_1[[i]] = adjustOHLC(data_eq_1[[i]], use.Adjusted=T),silent = TRUE))
#2 Stock
data_eq_2=new.env()
suppressWarnings(try(getSymbols(eq_2, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_2, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_2)) data_eq_2[[i]] = adjustOHLC(data_eq_2[[i]], use.Adjusted=T),silent = TRUE))
#-------------------------------------------------------------------
#Extraer Precio ajustado
precios_1=as.numeric(data_eq_1[[eq_1]][,6])
precios_2=as.numeric(data_eq_2[[eq_2]][,6])
#-------------------------------------------------------------------------------
#Sumar rentabilidades
#-------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#Parametros iniciales
capital_inicial=10000000
#------------------------------------------------------------------------------
#Calculo
cantidad_comprada_1=0.56*capital_inicial/precios_1[1]
cantidad_comprada_2=0.44*capital_inicial/precios_2[1]
#--------------------------------------------------------------------------------
#Calcular valor cartera
valor_portfolio_p=precios_1*cantidad_comprada_1+
precios_2*cantidad_comprada_2
#Crear rentabilidad inicia igual a 1
valor_portfolio_p=valor_portfolio_p/capital_inicial
#Crear valor_portolio primera ronda vs ronda+1
if(i_g==1){
valor_portfolio=valor_portfolio_p
}else{
valor_portfolio_p=valor_portfolio_p+(valor_portfolio[length(valor_portfolio)]-valor_portfolio[1])
valor_portfolio=c(valor_portfolio,valor_portfolio_p)
}
#--------------------------------------------------------------------------------------
#Etapa 13
#-------------------------------------------------------------------------------------
#Numerar la etapa
i_g=13
#año-mes-dia
f_init_test='2024-12-02'
f_final_test='2025-01-02'
#----------------------------------------------------------------------
#Cargar simbolo
eq_1="IJS"
eq_2="UPRO"
#------------------------------------------------------------------
#Descargar datos de yahoo
#1 Stock
data_eq_1=new.env()
suppressWarnings(try(getSymbols(eq_1, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_1, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_1)) data_eq_1[[i]] = adjustOHLC(data_eq_1[[i]], use.Adjusted=T),silent = TRUE))
#2 Stock
data_eq_2=new.env()
suppressWarnings(try(getSymbols(eq_2, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_2, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_2)) data_eq_2[[i]] = adjustOHLC(data_eq_2[[i]], use.Adjusted=T),silent = TRUE))
#-------------------------------------------------------------------
#Extraer Precio ajustado
precios_1=as.numeric(data_eq_1[[eq_1]][,6])
precios_2=as.numeric(data_eq_2[[eq_2]][,6])
#-------------------------------------------------------------------------------
#Sumar rentabilidades
#-------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#Parametros iniciales
capital_inicial=10000000
#------------------------------------------------------------------------------
#Calculo
cantidad_comprada_1=0.36*capital_inicial/precios_1[1]
cantidad_comprada_2=(1-0.36)*capital_inicial/precios_2[1]
#--------------------------------------------------------------------------------
#Calcular valor cartera
valor_portfolio_p=precios_1*cantidad_comprada_1+
precios_2*cantidad_comprada_2
#Crear rentabilidad inicia igual a 1
valor_portfolio_p=valor_portfolio_p/capital_inicial
#Crear valor_portolio primera ronda vs ronda+1
if(i_g==1){
valor_portfolio=valor_portfolio_p
}else{
valor_portfolio_p=valor_portfolio_p+(valor_portfolio[length(valor_portfolio)]-valor_portfolio[1])
valor_portfolio=c(valor_portfolio,valor_portfolio_p)
}
#--------------------------------------------------------------------------------------
#Etapa 14
#-------------------------------------------------------------------------------------
#Numerar la etapa
i_g=14
#año-mes-dia
f_init_test='2025-01-02'
f_final_test='2025-02-03'
#----------------------------------------------------------------------
#Cargar simbolo
eq_1="UPRO"
eq_2="IJS"
eq_3="SCZ"
eq_4="RPV"
eq_5="SPHQ"
#------------------------------------------------------------------
#Descargar datos de yahoo
#1 Stock
data_eq_1=new.env()
suppressWarnings(try(getSymbols(eq_1, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_1, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_1)) data_eq_1[[i]] = adjustOHLC(data_eq_1[[i]], use.Adjusted=T),silent = TRUE))
#2 Stock
data_eq_2=new.env()
suppressWarnings(try(getSymbols(eq_2, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_2, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_2)) data_eq_2[[i]] = adjustOHLC(data_eq_2[[i]], use.Adjusted=T),silent = TRUE))
#3 Stock
data_eq_3=new.env()
suppressWarnings(try(getSymbols(eq_3, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_3, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_3)) data_eq_3[[i]] = adjustOHLC(data_eq_3[[i]], use.Adjusted=T),silent = TRUE))
#4 Stock
data_eq_4=new.env()
suppressWarnings(try(getSymbols(eq_4, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_4, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_4)) data_eq_4[[i]] = adjustOHLC(data_eq_4[[i]], use.Adjusted=T),silent = TRUE))
#5 Stock
data_eq_5=new.env()
suppressWarnings(try(getSymbols(eq_5, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_5, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_5)) data_eq_5[[i]] = adjustOHLC(data_eq_5[[i]], use.Adjusted=T),silent = TRUE))
#-------------------------------------------------------------------
#Extraer Precio ajustado
precios_1=as.numeric(data_eq_1[[eq_1]][,6])
precios_2=as.numeric(data_eq_2[[eq_2]][,6])
precios_3=as.numeric(data_eq_3[[eq_3]][,6])
precios_4=as.numeric(data_eq_4[[eq_4]][,6])
precios_5=as.numeric(data_eq_5[[eq_5]][,6])
#-------------------------------------------------------------------------------
#Sumar rentabilidades
#-------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#Parametros iniciales
capital_inicial=10000000
#------------------------------------------------------------------------------
#Calculo
cantidad_comprada_1=0.35*capital_inicial/precios_1[1]
cantidad_comprada_2=0.0914*capital_inicial/precios_2[1]
cantidad_comprada_3=0.10*capital_inicial/precios_3[1]
cantidad_comprada_4=0.123*capital_inicial/precios_4[1]
cantidad_comprada_5=(1-0.35-0.0914-0.10-0.123)*capital_inicial/precios_5[1]
#--------------------------------------------------------------------------------
#Calcular valor cartera
valor_portfolio_p=precios_1*cantidad_comprada_1+
precios_2*cantidad_comprada_2+
precios_3*cantidad_comprada_3+
precios_4*cantidad_comprada_4+
precios_5*cantidad_comprada_5
#Crear rentabilidad inicia igual a 1
valor_portfolio_p=valor_portfolio_p/capital_inicial
#Crear valor_portolio primera ronda vs ronda+1
if(i_g==1){
valor_portfolio=valor_portfolio_p
}else{
valor_portfolio_p=valor_portfolio_p+(valor_portfolio[length(valor_portfolio)]-valor_portfolio[1])
valor_portfolio=c(valor_portfolio,valor_portfolio_p)
}
#--------------------------------------------------------------------------------------
#Etapa 15
#-------------------------------------------------------------------------------------
#Numerar la etapa
i_g=15
#año-mes-dia
f_init_test='2025-02-03'
f_final_test='2025-03-05'
#----------------------------------------------------------------------
#Cargar simbolo
eq_1="UPRO"
eq_2="IJS"
eq_3="SCZ"
eq_4="RPV"
eq_5="SPHQ"
#------------------------------------------------------------------
#Descargar datos de yahoo
#1 Stock
data_eq_1=new.env()
suppressWarnings(try(getSymbols(eq_1, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_1, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_1)) data_eq_1[[i]] = adjustOHLC(data_eq_1[[i]], use.Adjusted=T),silent = TRUE))
#2 Stock
data_eq_2=new.env()
suppressWarnings(try(getSymbols(eq_2, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_2, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_2)) data_eq_2[[i]] = adjustOHLC(data_eq_2[[i]], use.Adjusted=T),silent = TRUE))
#3 Stock
data_eq_3=new.env()
suppressWarnings(try(getSymbols(eq_3, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_3, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_3)) data_eq_3[[i]] = adjustOHLC(data_eq_3[[i]], use.Adjusted=T),silent = TRUE))
#4 Stock
data_eq_4=new.env()
suppressWarnings(try(getSymbols(eq_4, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_4, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_4)) data_eq_4[[i]] = adjustOHLC(data_eq_4[[i]], use.Adjusted=T),silent = TRUE))
#5 Stock
data_eq_5=new.env()
suppressWarnings(try(getSymbols(eq_5, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_5, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_5)) data_eq_5[[i]] = adjustOHLC(data_eq_5[[i]], use.Adjusted=T),silent = TRUE))
#-------------------------------------------------------------------
#Extraer Precio ajustado
precios_1=as.numeric(data_eq_1[[eq_1]][,6])
precios_2=as.numeric(data_eq_2[[eq_2]][,6])
precios_3=as.numeric(data_eq_3[[eq_3]][,6])
precios_4=as.numeric(data_eq_4[[eq_4]][,6])
precios_5=as.numeric(data_eq_5[[eq_5]][,6])
#-------------------------------------------------------------------------------
#Sumar rentabilidades
#-------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#Parametros iniciales
capital_inicial=10000000
#------------------------------------------------------------------------------
#Calculo
cantidad_comprada_1=0.37*capital_inicial/precios_1[1]
cantidad_comprada_2=0.0887*capital_inicial/precios_2[1]
cantidad_comprada_3=0.099*capital_inicial/precios_3[1]
cantidad_comprada_4=0.095*capital_inicial/precios_4[1]
cantidad_comprada_5=(1-0.37-0.0887-0.099-0.095)*capital_inicial/precios_5[1]
#--------------------------------------------------------------------------------
#Calcular valor cartera
valor_portfolio_p=precios_1*cantidad_comprada_1+
precios_2*cantidad_comprada_2+
precios_3*cantidad_comprada_3+
precios_4*cantidad_comprada_4+
precios_5*cantidad_comprada_5
#Crear rentabilidad inicia igual a 1
valor_portfolio_p=valor_portfolio_p/capital_inicial
#Crear valor_portolio primera ronda vs ronda+1
if(i_g==1){
valor_portfolio=valor_portfolio_p
}else{
valor_portfolio_p=valor_portfolio_p+(valor_portfolio[length(valor_portfolio)]-valor_portfolio[1])
valor_portfolio=c(valor_portfolio,valor_portfolio_p)
}
#--------------------------------------------------------------------------------------
#Etapa 16
#-------------------------------------------------------------------------------------
#Numerar la etapa
i_g=16
#año-mes-dia
f_init_test='2025-03-05'
f_final_test='2025-03-31'
#----------------------------------------------------------------------
#Cargar simbolo
eq_1="UPRO"
eq_2="IJS"
eq_3="SCZ"
eq_4="RPV"
eq_5="SPHQ"
#------------------------------------------------------------------
#Descargar datos de yahoo
#1 Stock
data_eq_1=new.env()
suppressWarnings(try(getSymbols(eq_1, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_1, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_1)) data_eq_1[[i]] = adjustOHLC(data_eq_1[[i]], use.Adjusted=T),silent = TRUE))
#2 Stock
data_eq_2=new.env()
suppressWarnings(try(getSymbols(eq_2, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_2, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_2)) data_eq_2[[i]] = adjustOHLC(data_eq_2[[i]], use.Adjusted=T),silent = TRUE))
#3 Stock
data_eq_3=new.env()
suppressWarnings(try(getSymbols(eq_3, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_3, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_3)) data_eq_3[[i]] = adjustOHLC(data_eq_3[[i]], use.Adjusted=T),silent = TRUE))
#4 Stock
data_eq_4=new.env()
suppressWarnings(try(getSymbols(eq_4, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_4, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_4)) data_eq_4[[i]] = adjustOHLC(data_eq_4[[i]], use.Adjusted=T),silent = TRUE))
#5 Stock
data_eq_5=new.env()
suppressWarnings(try(getSymbols(eq_5, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_5, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_5)) data_eq_5[[i]] = adjustOHLC(data_eq_5[[i]], use.Adjusted=T),silent = TRUE))
#-------------------------------------------------------------------
#Extraer Precio ajustado
precios_1=as.numeric(data_eq_1[[eq_1]][,6])
precios_2=as.numeric(data_eq_2[[eq_2]][,6])
precios_3=as.numeric(data_eq_3[[eq_3]][,6])
precios_4=as.numeric(data_eq_4[[eq_4]][,6])
precios_5=as.numeric(data_eq_5[[eq_5]][,6])
#-------------------------------------------------------------------------------
#Sumar rentabilidades
#-------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#Parametros iniciales
capital_inicial=10000000
#------------------------------------------------------------------------------
#Calculo
cantidad_comprada_1=0.30*capital_inicial/precios_1[1]
cantidad_comprada_2=0.09*capital_inicial/precios_2[1]
cantidad_comprada_3=0.10*capital_inicial/precios_3[1]
cantidad_comprada_4=0.13*capital_inicial/precios_4[1]
cantidad_comprada_5=(1-0.30-0.09-0.10-0.13)*capital_inicial/precios_5[1]
#--------------------------------------------------------------------------------
#Calcular valor cartera
valor_portfolio_p=precios_1*cantidad_comprada_1+
precios_2*cantidad_comprada_2+
precios_3*cantidad_comprada_3+
precios_4*cantidad_comprada_4+
precios_5*cantidad_comprada_5
#Crear rentabilidad inicia igual a 1
valor_portfolio_p=valor_portfolio_p/capital_inicial
#Crear valor_portolio primera ronda vs ronda+1
if(i_g==1){
valor_portfolio=valor_portfolio_p
}else{
valor_portfolio_p=valor_portfolio_p+(valor_portfolio[length(valor_portfolio)]-valor_portfolio[1])
valor_portfolio=c(valor_portfolio,valor_portfolio_p)
}
#--------------------------------------------------------------------------------------
#Etapa 17
#-------------------------------------------------------------------------------------
#Numerar la etapa
i_g=17
#año-mes-dia
f_init_test='2025-03-31'
f_final_test='2030-01-01'
#----------------------------------------------------------------------
#Cargar simbolo
eq_1="UPRO"
eq_2="IJS"
eq_3="SCZ"
eq_4="RPV"
eq_5="SPHQ"
#------------------------------------------------------------------
#Descargar datos de yahoo
#1 Stock
data_eq_1=new.env()
suppressWarnings(try(getSymbols(eq_1, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_1, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_1)) data_eq_1[[i]] = adjustOHLC(data_eq_1[[i]], use.Adjusted=T),silent = TRUE))
#2 Stock
data_eq_2=new.env()
suppressWarnings(try(getSymbols(eq_2, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_2, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_2)) data_eq_2[[i]] = adjustOHLC(data_eq_2[[i]], use.Adjusted=T),silent = TRUE))
#3 Stock
data_eq_3=new.env()
suppressWarnings(try(getSymbols(eq_3, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_3, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_3)) data_eq_3[[i]] = adjustOHLC(data_eq_3[[i]], use.Adjusted=T),silent = TRUE))
#4 Stock
data_eq_4=new.env()
suppressWarnings(try(getSymbols(eq_4, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_4, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_4)) data_eq_4[[i]] = adjustOHLC(data_eq_4[[i]], use.Adjusted=T),silent = TRUE))
#5 Stock
data_eq_5=new.env()
suppressWarnings(try(getSymbols(eq_5, src = 'yahoo', from = f_init_test, to=f_final_test,env = data_eq_5, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq_5)) data_eq_5[[i]] = adjustOHLC(data_eq_5[[i]], use.Adjusted=T),silent = TRUE))
#-------------------------------------------------------------------
#Extraer Precio ajustado
precios_1=as.numeric(data_eq_1[[eq_1]][,6])
precios_2=as.numeric(data_eq_2[[eq_2]][,6])
precios_3=as.numeric(data_eq_3[[eq_3]][,6])
precios_4=as.numeric(data_eq_4[[eq_4]][,6])
precios_5=as.numeric(data_eq_5[[eq_5]][,6])
#-------------------------------------------------------------------------------
#Sumar rentabilidades
#-------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#Parametros iniciales
capital_inicial=10000000
#------------------------------------------------------------------------------
#Calculo
cantidad_comprada_1=0.44*capital_inicial/precios_1[1]
cantidad_comprada_2=0.09*capital_inicial/precios_2[1]
cantidad_comprada_3=0.09*capital_inicial/precios_3[1]
cantidad_comprada_4=0.09*capital_inicial/precios_4[1]
cantidad_comprada_5=(1-0.44-0.09-0.09-0.09)*capital_inicial/precios_5[1]
#--------------------------------------------------------------------------------
#Calcular valor cartera
valor_portfolio_p=precios_1*cantidad_comprada_1+
precios_2*cantidad_comprada_2+
precios_3*cantidad_comprada_3+
precios_4*cantidad_comprada_4+
precios_5*cantidad_comprada_5
#Crear rentabilidad inicia igual a 1
valor_portfolio_p=valor_portfolio_p/capital_inicial
#Crear valor_portolio primera ronda vs ronda+1
if(i_g==1){
valor_portfolio=valor_portfolio_p
}else{
valor_portfolio_p=valor_portfolio_p+(valor_portfolio[length(valor_portfolio)]-valor_portfolio[1])
valor_portfolio=c(valor_portfolio,valor_portfolio_p)
}
#-------------------------------------------------------------------------------
#Comparar
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#Extraer precio indice
f_init_ind='2021-05-11'
f_final_ind=f_final_test
#Primero año--->mes--->dia
data_eq=new.env()
suppressWarnings(try(getSymbols("^GSPC", src = 'yahoo', from = f_init_ind, to=f_final_ind,env = data_eq, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq)) data_eq[[i]] = adjustOHLC(data_eq[[i]], use.Adjusted=T),silent = TRUE))
#^GSPC
precios_indice=as.numeric(data_eq$GSPC[,6])
#Primero año--->mes--->dia
data_eq=new.env()
suppressWarnings(try(getSymbols("BRK-A", src = 'yahoo', from = f_init_ind, to=f_final_ind,env = data_eq, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq)) data_eq[[i]] = adjustOHLC(data_eq[[i]], use.Adjusted=T),silent = TRUE))
#Extraer BRK_A
precios_BRK_A=as.numeric(data_eq$`BRK-A`[,6])
#Primero año--->mes--->dia
data_eq=new.env()
suppressWarnings(try(getSymbols("JPM", src = 'yahoo', from = f_init_ind, to=f_final_ind,env = data_eq, auto.assign = T, periodicity = "d"),silent = T))
suppressWarnings(try(for(i in ls(data_eq)) data_eq[[i]] = adjustOHLC(data_eq[[i]], use.Adjusted=T),silent = TRUE))
#Extraer JMP
precios_JMP=as.numeric(data_eq$JPM[,6])
#----------------------------------------------------------------------------------
#Transformar en rentabilidad inicio 1
#SP500
valor_indice=precios_indice/precios_indice[1]
#BRK-A
valor_BRK_A=precios_BRK_A/precios_BRK_A[1]
#JMP
valor_JPM=precios_JMP/precios_JMP[1]
#Armar data frame  SP500
data_rent_indice=data.frame(fecha=index(data_eq$JPM), valor_indice=valor_indice)
#Armar data frame  BRK-A
data_rent_BRK_A=data.frame(fecha=index(data_eq$JPM), valor_BRK_A=valor_BRK_A)
#Armar data frame  JMP
data_rent_JPM=data.frame(fecha=index(data_eq$JPM), valor_JPM=valor_JPM)
#Armar data frame para la cartera
data_rent_cartera=data.frame(fecha=index(data_eq$JPM), valor_portfolio=valor_portfolio)
#----------------------------------------------------------------------------------
#Graficar
data_valores=cbind(data_rent_cartera,data_rent_indice$valor_indice,data_rent_BRK_A$valor_BRK_A,data_rent_JPM$valor_JPM)
#Ordenar datos
colnames(data_valores)=c("fecha","valor_portfolio","valor_indice","valor_BRK_A","valor_JPM")
data_valores_p=data_valores %>%
select(fecha,valor_portfolio, valor_indice,valor_BRK_A,valor_JPM) %>% gather(key = "variable", value = "value", -fecha)
#Grear grafico
g=ggplot(data_valores_p, aes(x = fecha, y = value))
g=g+geom_line(aes(color = variable, fill = variable), alpha = 0.9, position = position_dodge(0.8))
g=g+scale_color_manual(values = c("#00AFBB", "#0072B2","#CC79A7", "#E7B800"))
g=g+scale_fill_manual(values = c("#00AFBB", "#0072B2","#CC79A7", "#E7B800"))
g=g+scale_x_date(date_labels = "20%y", date_breaks = "1 years")
g=g+xlab("Tiempo") + ylab("Rendimiento acumulado")
g=g+theme_minimal()
g
ggplotly(g)
#-------------------------------------------------------------------------------
#Estimar rentabilidades
#-------------------------------------------------------------------------------
#Estimar rentabilidad SP500
i_diario_indice=(valor_indice[length(valor_indice)])^(1/length(valor_indice))
round((i_diario_indice^(252)-1),5)
#Estimar rentabilidad cartera
i_diario_cartera=(valor_portfolio[length(valor_portfolio)])^(1/length(valor_portfolio))
round((i_diario_cartera^(252)-1),5)
valor_portfolio[length(valor_portfolio)]
#Estimar rentabilidad BRK_A
i_diario=(valor_BRK_A[length(valor_BRK_A)])^(1/length(valor_BRK_A))
round((i_diario^(252)-1),3)
#Estimar rentabilidad JPM
i_diario=(valor_JPM[length(valor_JPM)])^(1/length(valor_JPM))
round((i_diario^(252)-1),3)
#-------------------------------------------------------------------------------
#Estimar Drawdown
#------------------------------------------------------------------------------
#Estimar SP500
max(1-valor_indice/cummax(valor_indice))
#Estimar Portolio
max(1-valor_portfolio/cummax(valor_portfolio))
#Estimar BRK_A
max(1-valor_BRK_A/cummax(valor_BRK_A))
#Estimar JPM
max(1-valor_JPM/cummax(valor_JPM))
